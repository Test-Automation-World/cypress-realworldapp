name: Run Cypress tests

on:
  workflow_dispatch:

jobs:
  test:
    name: Spin up application to run tests

    runs-on: ubuntu-latest

    # run 3 copies of the current job in parallel
    strategy:
      fail-fast: false
      matrix:
        containers: [1, 2, 3]

    steps:
      - uses: actions/checkout@v3

      # Paso 2: Iniciar contenedores con Docker Compose
      - name: Init PostgreSQL
        run: docker run --name my_postgres_container -e POSTGRES_PASSWORD=postgres -d -p 5432:5432 postgres:latest

      # Paso 3: Esperar a que los contenedores est√©n listos
      - name: Wait for PostgreSQL to be ready
        run: |
          wget -O dockerize.tar.gz https://github.com/jwilder/dockerize/releases/download/v0.7.0/dockerize-alpine-linux-amd64-v0.7.0.tar.gz && tar -C /usr/local/bin -xzvf dockerize.tar.gz && rm dockerize.tar.gz
          dockerize -wait tcp://localhost:5432 -timeout 1m

      - name: Install dependencies
        run: npm install

      - name: Start application
        run: |
          npm run dev
        env:
          PORT: 3001
          JWT_KEY: supersecretkey
          DEV_DB_USERNAME: postgres
          DEV_DB_PASSWORD: postgres
          DEV_DB_NAME: db_dev
          DEV_DB_HOSTNAME: postgresql
          DEV_DB_DIALECT: postgres

      - name: Wait on
        uses: iFaxity/wait-on-action@v1.1.0
        with:
          resource: http://localhost:3000

      # Paso 4: Ejecutar el script de sembrado de datos
      - name: Seed database
        run: npm run sqlz -- db:seed:all

      - name: Register cypress user
        run: |
          curl -X POST 'http://localhost:3000/api/users' -H 'Content-Type: application/json' -d '{"user": {"username": "cypress-user","email": "cypress@realworld.com","password": "cypress@realworld.com"}}'

      - name: Run e2e cypress tests with cypress-io
        uses: cypress-io/github-action@v6.5.0
        # pass the machine index and the total number
        env:
          SPLIT: ${{ strategy.job-total }}
          SPLIT_INDEX: ${{ strategy.job-index }}
